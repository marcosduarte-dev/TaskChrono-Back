basePath: /
definitions:
  dto.ProjectInputDTO:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
      user_id:
        type: string
    type: object
  dto.TaskInputDTO:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
      project_id:
        type: string
    type: object
  entity.Project:
    properties:
      color:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      user_id:
        type: string
    type: object
  entity.Return:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  entity.Task:
    properties:
      color:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      project:
        $ref: '#/definitions/entity.Project'
      project_id:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: pe.marcos30@gmail.com
    name: Marcos Duarte
    url: http://github.com/marcosduarte-dev/
  description: BackEnd to timer project
  license:
    name: MarkDev License
    url: http://github.com/marcosduarte-dev/
  termsOfService: http://www.swagger.io/terms/
  title: Go Task Chrono API
  version: "1.0"
paths:
  /projects:
    get:
      consumes:
      - application/json
      description: get all projects
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Project'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Return'
      summary: List projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create projects
      parameters:
      - description: project request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Return'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Create project
      tags:
      - projects
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a project by ID
      parameters:
      - description: project ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Return'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Delete a project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Get a project by id
      parameters:
      - description: project ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Get a project
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update a project by ID
      parameters:
      - description: project ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: project request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Return'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Update a project
      tags:
      - projects
  /tasks:
    get:
      consumes:
      - application/json
      description: get all tasks
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Task'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Return'
      summary: List tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create tasks
      parameters:
      - description: task request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TaskInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Return'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Create task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task by ID
      parameters:
      - description: task ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Return'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Get a task by id
      parameters:
      - description: task ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Get a task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task by ID
      parameters:
      - description: task ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: task request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TaskInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Return'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Update a task
      tags:
      - tasks
  /tasks/project/{id}:
    get:
      consumes:
      - application/json
      description: Get taks by project ID
      parameters:
      - description: Project ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Return'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Return'
      summary: Get taks by project ID
      tags:
      - tasks
swagger: "2.0"
